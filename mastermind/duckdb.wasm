/**
 * Bundled by jsDelivr using Rollup v2.79.2 and Terser v5.39.0.
 * Original file: /npm/@duckdb/duckdb-wasm@1.27.0/dist/duckdb-browser.mjs
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import*as e from"/npm/apache-arrow@11.0.0/+esm";var s=Object.create;var t=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var r=Object.getOwnPropertyNames;var n=Object.getPrototypeOf,i=Object.prototype.hasOwnProperty;var d=(e,s)=>()=>(s||e((s={exports:{}}).exports,s),s.exports);var o=(e,s,n,d)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of r(s))!i.call(e,o)&&o!==n&&t(e,o,{get:()=>s[o],enumerable:!(d=a(s,o))||d.enumerable});return e};var c=(e,a,r)=>(r=e!=null?s(n(e)):{},o(a||!e||!e.__esModule?t(r,"default",{value:e,enumerable:!0}):r,e));var E=d(((e,s)=>{s.exports=Worker}));var l=(e=>(e[e.UNDEFINED=0]="UNDEFINED",e[e.AUTOMATIC=1]="AUTOMATIC",e[e.READ_ONLY=2]="READ_ONLY",e[e.READ_WRITE=3]="READ_WRITE",e))(l||{});var _=(e=>(e[e.NONE=0]="NONE",e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.WARNING=3]="WARNING",e[e.ERROR=4]="ERROR",e))(_||{}),u=(e=>(e[e.NONE=0]="NONE",e[e.CONNECT=1]="CONNECT",e[e.DISCONNECT=2]="DISCONNECT",e[e.OPEN=3]="OPEN",e[e.QUERY=4]="QUERY",e[e.INSTANTIATE=5]="INSTANTIATE",e))(u||{}),R=(e=>(e[e.NONE=0]="NONE",e[e.OK=1]="OK",e[e.ERROR=2]="ERROR",e[e.START=3]="START",e[e.RUN=4]="RUN",e[e.CAPTURE=5]="CAPTURE",e))(R||{}),T=(e=>(e[e.NONE=0]="NONE",e[e.WEB_WORKER=1]="WEB_WORKER",e[e.NODE_WORKER=2]="NODE_WORKER",e[e.BINDINGS=3]="BINDINGS",e[e.ASYNC_DUCKDB=4]="ASYNC_DUCKDB",e))(T||{}),p=class{log(e){}},h=class{constructor(e=2){this.level=e}log(e){e.level>=this.level&&console.log(e)}};function I(e){switch(e){case 0:return"NONE";case 1:return"DEBUG";case 2:return"INFO";case 3:return"WARNING";case 4:return"ERROR";default:return"?"}}function m(e){switch(e){case 0:return"NONE";case 1:return"OK";case 2:return"ERROR";case 3:return"START";case 4:return"RUN";case 5:return"CAPTURE";default:return"?"}}function b(e){switch(e){case 1:return"CONNECT";case 2:return"DISCONNECT";case 5:return"INSTANTIATE";case 3:return"OPEN";case 4:return"QUERY";default:return"?"}}function S(e){switch(e){case 0:return"NONE";case 1:return"WEB WORKER";case 2:return"NODE WORKER";case 3:return"DUCKDB BINDINGS";case 4:return"DUCKDB";default:return"?"}}var g=(e=>(e[e.SUCCESS=0]="SUCCESS",e))(g||{});var y=class{constructor(e,s){this._bindings=e,this._conn=s}get bindings(){return this._bindings}async close(){return this._bindings.disconnect(this._conn)}useUnsafe(e){return e(this._bindings,this._conn)}async query(s){this._bindings.logger.log({timestamp:new Date,level:2,origin:4,topic:4,event:4,value:s});let t=await this._bindings.runQuery(this._conn,s),a=e.RecordBatchReader.from(t);return console.assert(a.isSync(),"Reader is not sync"),console.assert(a.isFile(),"Reader is not file"),new e.Table(a)}async send(s){this._bindings.logger.log({timestamp:new Date,level:2,origin:4,topic:4,event:4,value:s});let t=await this._bindings.startPendingQuery(this._conn,s);for(;t==null;)t=await this._bindings.pollPendingQuery(this._conn);let a=new N(this._bindings,this._conn,t),r=await e.RecordBatchReader.from(a);return console.assert(r.isAsync()),console.assert(r.isStream()),r}async cancelSent(){return await this._bindings.cancelPendingQuery(this._conn)}async getTableNames(e){return await this._bindings.getTableNames(this._conn,e)}async prepare(e){let s=await this._bindings.createPrepared(this._conn,e);return new k(this._bindings,this._conn,s)}async insertArrowTable(s,t){let a=e.tableToIPC(s,"stream");await this.insertArrowFromIPCStream(a,t)}async insertArrowFromIPCStream(e,s){await this._bindings.insertArrowFromIPCStream(this._conn,e,s)}async insertCSVFromPath(e,s){await this._bindings.insertCSVFromPath(this._conn,e,s)}async insertJSONFromPath(e,s){await this._bindings.insertJSONFromPath(this._conn,e,s)}},N=class{constructor(e,s,t){this.db=e;this.conn=s;this.header=t;this._first=!0,this._depleted=!1,this._inFlight=null}async next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let e;return this._inFlight!=null?(e=await this._inFlight,this._inFlight=null):e=await this.db.fetchQueryResults(this.conn),this._depleted=e.length==0,this._depleted||(this._inFlight=this.db.fetchQueryResults(this.conn)),{done:this._depleted,value:e}}[Symbol.asyncIterator](){return this}},k=class{constructor(e,s,t){this.bindings=e,this.connectionId=s,this.statementId=t}async close(){await this.bindings.closePrepared(this.connectionId,this.statementId)}async query(...s){let t=await this.bindings.runPrepared(this.connectionId,this.statementId,s),a=e.RecordBatchReader.from(t);return console.assert(a.isSync()),console.assert(a.isFile()),new e.Table(a)}async send(...s){let t=await this.bindings.sendPrepared(this.connectionId,this.statementId,s),a=new N(this.bindings,this.connectionId,t),r=await e.RecordBatchReader.from(a);return console.assert(r.isAsync()),console.assert(r.isStream()),r}};var w=(e=>(e.CANCEL_PENDING_QUERY="CANCEL_PENDING_QUERY",e.CLOSE_PREPARED="CLOSE_PREPARED",e.COLLECT_FILE_STATISTICS="COLLECT_FILE_STATISTICS",e.CONNECT="CONNECT",e.COPY_FILE_TO_BUFFER="COPY_FILE_TO_BUFFER",e.COPY_FILE_TO_PATH="COPY_FILE_TO_PATH",e.CREATE_PREPARED="CREATE_PREPARED",e.DISCONNECT="DISCONNECT",e.DROP_FILE="DROP_FILE",e.DROP_FILES="DROP_FILES",e.EXPORT_FILE_STATISTICS="EXPORT_FILE_STATISTICS",e.FETCH_QUERY_RESULTS="FETCH_QUERY_RESULTS",e.FLUSH_FILES="FLUSH_FILES",e.GET_FEATURE_FLAGS="GET_FEATURE_FLAGS",e.GET_TABLE_NAMES="GET_TABLE_NAMES",e.GET_VERSION="GET_VERSION",e.GLOB_FILE_INFOS="GLOB_FILE_INFOS",e.INSERT_ARROW_FROM_IPC_STREAM="INSERT_ARROW_FROM_IPC_STREAM",e.INSERT_CSV_FROM_PATH="IMPORT_CSV_FROM_PATH",e.INSERT_JSON_FROM_PATH="IMPORT_JSON_FROM_PATH",e.INSTANTIATE="INSTANTIATE",e.OPEN="OPEN",e.PING="PING",e.POLL_PENDING_QUERY="POLL_PENDING_QUERY",e.REGISTER_FILE_BUFFER="REGISTER_FILE_BUFFER",e.REGISTER_FILE_HANDLE="REGISTER_FILE_HANDLE",e.REGISTER_FILE_URL="REGISTER_FILE_URL",e.RESET="RESET",e.RUN_PREPARED="RUN_PREPARED",e.RUN_QUERY="RUN_QUERY",e.SEND_PREPARED="SEND_PREPARED",e.START_PENDING_QUERY="START_PENDING_QUERY",e.TOKENIZE="TOKENIZE",e))(w||{}),O=(e=>(e.CONNECTION_INFO="CONNECTION_INFO",e.ERROR="ERROR",e.FEATURE_FLAGS="FEATURE_FLAGS",e.FILE_BUFFER="FILE_BUFFER",e.FILE_INFOS="FILE_INFOS",e.FILE_SIZE="FILE_SIZE",e.FILE_STATISTICS="FILE_STATISTICS",e.INSTANTIATE_PROGRESS="INSTANTIATE_PROGRESS",e.LOG="LOG",e.OK="OK",e.PREPARED_STATEMENT_ID="PREPARED_STATEMENT_ID",e.QUERY_PLAN="QUERY_PLAN",e.QUERY_RESULT="QUERY_RESULT",e.QUERY_RESULT_CHUNK="QUERY_RESULT_CHUNK",e.QUERY_RESULT_HEADER="QUERY_RESULT_HEADER",e.QUERY_RESULT_HEADER_OR_NULL="QUERY_RESULT_HEADER_OR_NULL",e.REGISTERED_FILE="REGISTERED_FILE",e.SCRIPT_TOKENS="SCRIPT_TOKENS",e.SUCCESS="SUCCESS",e.TABLE_NAMES="TABLE_NAMES",e.VERSION_STRING="VERSION_STRING",e))(O||{}),F=class{constructor(e,s){this.promiseResolver=()=>{};this.promiseRejecter=()=>{};this.type=e,this.data=s,this.promise=new Promise(((e,s)=>{this.promiseResolver=e,this.promiseRejecter=s}))}};function A(s){switch(s.typeId){case e.Type.Binary:return{sqlType:"binary"};case e.Type.Bool:return{sqlType:"bool"};case e.Type.Date:return{sqlType:"date"};case e.Type.DateDay:return{sqlType:"date32[d]"};case e.Type.DateMillisecond:return{sqlType:"date64[ms]"};case e.Type.Decimal:{let e=s;return{sqlType:"decimal",precision:e.precision,scale:e.scale}}case e.Type.Float:return{sqlType:"float"};case e.Type.Float16:return{sqlType:"float16"};case e.Type.Float32:return{sqlType:"float32"};case e.Type.Float64:return{sqlType:"float64"};case e.Type.Int:return{sqlType:"int32"};case e.Type.Int16:return{sqlType:"int16"};case e.Type.Int32:return{sqlType:"int32"};case e.Type.Int64:return{sqlType:"int64"};case e.Type.Uint16:return{sqlType:"uint16"};case e.Type.Uint32:return{sqlType:"uint32"};case e.Type.Uint64:return{sqlType:"uint64"};case e.Type.Uint8:return{sqlType:"uint8"};case e.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case e.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case e.Type.List:return{sqlType:"list",valueType:A(s.valueType)};case e.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:s.byteWidth};case e.Type.Null:return{sqlType:"null"};case e.Type.Utf8:return{sqlType:"utf8"};case e.Type.Struct:return{sqlType:"struct",fields:s.children.map((e=>L(e.name,e.type)))};case e.Type.Map:{let e=s;return{sqlType:"map",keyType:A(e.keyType),valueType:A(e.valueType)}}case e.Type.Time:return{sqlType:"time[s]"};case e.Type.TimeMicrosecond:return{sqlType:"time[us]"};case e.Type.TimeMillisecond:return{sqlType:"time[ms]"};case e.Type.TimeNanosecond:return{sqlType:"time[ns]"};case e.Type.TimeSecond:return{sqlType:"time[s]"};case e.Type.Timestamp:return{sqlType:"timestamp",timezone:s.timezone||void 0};case e.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:s.timezone||void 0};case e.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:s.timezone||void 0};case e.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:s.timezone||void 0};case e.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:s.timezone||void 0}}throw new Error(`unsupported arrow type: ${s.toString()}`)}function L(e,s){let t=A(s);return t.name=e,t}var P=new TextEncoder,C=class{constructor(e,s=null){this._onInstantiationProgress=[];this._worker=null;this._workerShutdownPromise=null;this._workerShutdownResolver=()=>{};this._nextMessageId=0;this._pendingRequests=new Map;this._logger=e,this._onMessageHandler=this.onMessage.bind(this),this._onErrorHandler=this.onError.bind(this),this._onCloseHandler=this.onClose.bind(this),s!=null&&this.attach(s)}get logger(){return this._logger}attach(e){this._worker=e,this._worker.addEventListener("message",this._onMessageHandler),this._worker.addEventListener("error",this._onErrorHandler),this._worker.addEventListener("close",this._onCloseHandler),this._workerShutdownPromise=new Promise(((e,s)=>{this._workerShutdownResolver=e}))}detach(){!this._worker||(this._worker.removeEventListener("message",this._onMessageHandler),this._worker.removeEventListener("error",this._onErrorHandler),this._worker.removeEventListener("close",this._onCloseHandler),this._worker=null,this._workerShutdownResolver(null),this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async terminate(){!this._worker||(this._worker.terminate(),this._worker=null,this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async postTask(e,s=[]){if(!this._worker){console.error("cannot send a message since the worker is not set!");return}let t=this._nextMessageId++;return this._pendingRequests.set(t,e),this._worker.postMessage({messageId:t,type:e.type,data:e.data},s),await e.promise}onMessage(e){let s=e.data;switch(s.type){case"LOG":{this._logger.log(s.data);return}case"INSTANTIATE_PROGRESS":{for(let e of this._onInstantiationProgress)e(s.data);return}}let t=this._pendingRequests.get(s.requestId);if(!t){console.warn(`unassociated response: [${s.requestId}, ${s.type.toString()}]`);return}if(this._pendingRequests.delete(s.requestId),s.type=="ERROR"){let e=new Error(s.data.message);e.name=s.data.name,e.stack=s.data.stack,t.promiseRejecter(e);return}switch(t.type){case"CLOSE_PREPARED":case"COLLECT_FILE_STATISTICS":case"COPY_FILE_TO_PATH":case"DISCONNECT":case"DROP_FILE":case"DROP_FILES":case"FLUSH_FILES":case"INSERT_ARROW_FROM_IPC_STREAM":case"IMPORT_CSV_FROM_PATH":case"IMPORT_JSON_FROM_PATH":case"OPEN":case"PING":case"REGISTER_FILE_BUFFER":case"REGISTER_FILE_HANDLE":case"REGISTER_FILE_URL":case"RESET":if(s.type=="OK"){t.promiseResolver(s.data);return}break;case"INSTANTIATE":if(this._onInstantiationProgress=[],s.type=="OK"){t.promiseResolver(s.data);return}break;case"GLOB_FILE_INFOS":if(s.type=="FILE_INFOS"){t.promiseResolver(s.data);return}break;case"GET_VERSION":if(s.type=="VERSION_STRING"){t.promiseResolver(s.data);return}break;case"GET_FEATURE_FLAGS":if(s.type=="FEATURE_FLAGS"){t.promiseResolver(s.data);return}break;case"GET_TABLE_NAMES":if(s.type=="TABLE_NAMES"){t.promiseResolver(s.data);return}break;case"TOKENIZE":if(s.type=="SCRIPT_TOKENS"){t.promiseResolver(s.data);return}break;case"COPY_FILE_TO_BUFFER":if(s.type=="FILE_BUFFER"){t.promiseResolver(s.data);return}break;case"EXPORT_FILE_STATISTICS":if(s.type=="FILE_STATISTICS"){t.promiseResolver(s.data);return}break;case"CONNECT":if(s.type=="CONNECTION_INFO"){t.promiseResolver(s.data);return}break;case"RUN_PREPARED":case"RUN_QUERY":if(s.type=="QUERY_RESULT"){t.promiseResolver(s.data);return}break;case"SEND_PREPARED":if(s.type=="QUERY_RESULT_HEADER"){t.promiseResolver(s.data);return}break;case"START_PENDING_QUERY":if(s.type=="QUERY_RESULT_HEADER_OR_NULL"){t.promiseResolver(s.data);return}break;case"POLL_PENDING_QUERY":if(s.type=="QUERY_RESULT_HEADER_OR_NULL"){t.promiseResolver(s.data);return}break;case"CANCEL_PENDING_QUERY":if(this._onInstantiationProgress=[],s.type=="SUCCESS"){t.promiseResolver(s.data);return}break;case"FETCH_QUERY_RESULTS":if(s.type=="QUERY_RESULT_CHUNK"){t.promiseResolver(s.data);return}break;case"CREATE_PREPARED":if(s.type=="PREPARED_STATEMENT_ID"){t.promiseResolver(s.data);return}break}t.promiseRejecter(new Error(`unexpected response type: ${s.type.toString()}`))}onError(e){console.error(e),console.error(`error in duckdb worker: ${e.message}`),this._pendingRequests.clear()}onClose(){if(this._workerShutdownResolver(null),this._pendingRequests.size!=0){console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);return}this._pendingRequests.clear()}async reset(){let e=new F("RESET",null);return await this.postTask(e)}async ping(){let e=new F("PING",null);await this.postTask(e)}async dropFile(e){let s=new F("DROP_FILE",e);return await this.postTask(s)}async dropFiles(){let e=new F("DROP_FILES",null);return await this.postTask(e)}async flushFiles(){let e=new F("FLUSH_FILES",null);return await this.postTask(e)}async instantiate(e,s=null,t=e=>{}){this._onInstantiationProgress.push(t);let a=new F("INSTANTIATE",[e,s]);return await this.postTask(a)}async getVersion(){let e=new F("GET_VERSION",null);return await this.postTask(e)}async getFeatureFlags(){let e=new F("GET_FEATURE_FLAGS",null);return await this.postTask(e)}async open(e){let s=new F("OPEN",e);await this.postTask(s)}async tokenize(e){let s=new F("TOKENIZE",e);return await this.postTask(s)}async connectInternal(){let e=new F("CONNECT",null);return await this.postTask(e)}async connect(){let e=await this.connectInternal();return new y(this,e)}async disconnect(e){let s=new F("DISCONNECT",e);await this.postTask(s)}async runQuery(e,s){let t=new F("RUN_QUERY",[e,s]);return await this.postTask(t)}async startPendingQuery(e,s){let t=new F("START_PENDING_QUERY",[e,s]);return await this.postTask(t)}async pollPendingQuery(e){let s=new F("POLL_PENDING_QUERY",e);return await this.postTask(s)}async cancelPendingQuery(e){let s=new F("CANCEL_PENDING_QUERY",e);return await this.postTask(s)}async fetchQueryResults(e){let s=new F("FETCH_QUERY_RESULTS",e);return await this.postTask(s)}async getTableNames(e,s){let t=new F("GET_TABLE_NAMES",[e,s]);return await this.postTask(t)}async createPrepared(e,s){let t=new F("CREATE_PREPARED",[e,s]);return await this.postTask(t)}async closePrepared(e,s){let t=new F("CLOSE_PREPARED",[e,s]);await this.postTask(t)}async runPrepared(e,s,t){let a=new F("RUN_PREPARED",[e,s,t]);return await this.postTask(a)}async sendPrepared(e,s,t){let a=new F("SEND_PREPARED",[e,s,t]);return await this.postTask(a)}async globFiles(e){let s=new F("GLOB_FILE_INFOS",e);return await this.postTask(s)}async registerFileText(e,s){let t=P.encode(s);await this.registerFileBuffer(e,t)}async registerFileURL(e,s,t,a){s===void 0&&(s=e);let r=new F("REGISTER_FILE_URL",[e,s,t,a]);await this.postTask(r)}async registerEmptyFileBuffer(e){let s=new F("REGISTER_FILE_BUFFER",[e,new Uint8Array]);await this.postTask(s)}async registerFileBuffer(e,s){let t=new F("REGISTER_FILE_BUFFER",[e,s]);await this.postTask(t,[s.buffer])}async registerFileHandle(e,s,t,a){let r=new F("REGISTER_FILE_HANDLE",[e,s,t,a]);await this.postTask(r,[])}async collectFileStatistics(e,s){let t=new F("COLLECT_FILE_STATISTICS",[e,s]);await this.postTask(t,[])}async exportFileStatistics(e){let s=new F("EXPORT_FILE_STATISTICS",e);return await this.postTask(s,[])}async copyFileToBuffer(e){let s=new F("COPY_FILE_TO_BUFFER",e);return await this.postTask(s)}async copyFileToPath(e,s){let t=new F("COPY_FILE_TO_PATH",[e,s]);await this.postTask(t)}async insertArrowFromIPCStream(e,s,t){if(s.length==0)return;let a=new F("INSERT_ARROW_FROM_IPC_STREAM",[e,s,t]);await this.postTask(a,[s.buffer])}async insertCSVFromPath(e,s,t){if(t.columns!==void 0){let e=[];for(let s in t.columns){let a=t.columns[s];e.push(L(s,a))}t.columnsFlat=e,delete t.columns}let a=new F("IMPORT_CSV_FROM_PATH",[e,s,t]);await this.postTask(a)}async insertJSONFromPath(e,s,t){if(t.columns!==void 0){let e=[];for(let s in t.columns){let a=t.columns[s];e.push(L(s,a))}t.columnsFlat=e,delete t.columns}let a=new F("IMPORT_JSON_FROM_PATH",[e,s,t]);await this.postTask(a)}};var U=class{constructor(){this._bindings=null;this._nextMessageId=0}log(e){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:e},[])}sendOK(e){this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"OK",data:null},[])}failWith(e,s){let t={name:s.name,message:s.message,stack:s.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"ERROR",data:t},[])}async onMessage(e){switch(e.type){case"PING":this.sendOK(e);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(e,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(e.data[0],e.data[1],(s=>{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"INSTANTIATE_PROGRESS",data:s},[])})),this.sendOK(e)}catch(s){this._bindings=null,this.failWith(e,s)}return}if(!this._bindings)return this.failWith(e,new Error("duckdb is not initialized"));try{switch(e.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(e);break;case"OPEN":this._bindings.open(e.data),this.sendOK(e);break;case"DROP_FILE":this._bindings.dropFile(e.data),this.sendOK(e);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(e);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(e);break;case"CONNECT":{let s=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"CONNECTION_INFO",data:s.useUnsafe(((e,s)=>s))},[]);break}case"DISCONNECT":this._bindings.disconnect(e.data),this.sendOK(e);break;case"CREATE_PREPARED":{let s=this._bindings.createPrepared(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"PREPARED_STATEMENT_ID",data:s},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(e.data[0],e.data[1]),this.sendOK(e);break}case"RUN_PREPARED":{let s=this._bindings.runPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:s},[s.buffer]);break}case"RUN_QUERY":{let s=this._bindings.runQuery(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:s},[s.buffer]);break}case"SEND_PREPARED":{let s=this._bindings.sendPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER",data:s},[s.buffer]);break}case"START_PENDING_QUERY":{let s=this._bindings.startPendingQuery(e.data[0],e.data[1]),t=[];s&&t.push(s.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:s},t);break}case"POLL_PENDING_QUERY":{let s=this._bindings.pollPendingQuery(e.data),t=[];s&&t.push(s.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:s},t);break}case"CANCEL_PENDING_QUERY":{let s=this._bindings.cancelPendingQuery(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SUCCESS",data:s},[]);break}case"FETCH_QUERY_RESULTS":{let s=this._bindings.fetchQueryResults(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_CHUNK",data:s},[s.buffer]);break}case"GET_TABLE_NAMES":{let s=this._bindings.getTableNames(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"TABLE_NAMES",data:s},[]);break}case"GLOB_FILE_INFOS":{let s=this._bindings.globFiles(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_INFOS",data:s},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(e.data[0],e.data[1]),this.sendOK(e);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(e.data[0],e.data[1]),this.sendOK(e);break;case"COPY_FILE_TO_BUFFER":{let s=this._bindings.copyFileToBuffer(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_BUFFER",data:s},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(e.data[0],e.data[1]),this.sendOK(e);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(e.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"TOKENIZE":{let s=this._bindings.tokenize(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SCRIPT_TOKENS",data:s},[]);break}}}catch(s){return this.failWith(e,s)}}};var f=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),D=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11]));var v=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));var M=()=>(async e=>{try{return typeof MessageChannel<"u"&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));var G={name:"@duckdb/duckdb-wasm",version:"1.27.0",description:"DuckDB powered by WebAssembly",license:"MIT",repository:{type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},keywords:["sql","duckdb","relational","database","data","query","wasm","analytics","olap","arrow","parquet","json","csv"],dependencies:{"apache-arrow":"^11.0.0"},devDependencies:{"@types/emscripten":"^1.39.6","@types/jasmine":"^4.3.1","@typescript-eslint/eslint-plugin":"^5.53.0","@typescript-eslint/parser":"^5.49.0",esbuild:"^0.15.12",eslint:"^8.35.0","eslint-plugin-jasmine":"^4.1.3","eslint-plugin-react":"^7.32.2","fast-glob":"^3.2.12",jasmine:"^4.5.0","jasmine-core":"^5.0.0","jasmine-spec-reporter":"^7.0.0","js-sha256":"^0.9.0",karma:"^6.4.2","karma-chrome-launcher":"^3.1.1","karma-coverage":"^2.2.0","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^5.1.0","karma-jasmine-html-reporter":"^2.0.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.36","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.8.4",puppeteer:"^19.10.0",rimraf:"^4.3.0",s3rver:"^3.7.1",typedoc:"^0.24.8",typescript:"^4.8.4","wasm-feature-detect":"^1.5.1","web-worker":"^1.2.0"},scripts:{"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:debug":"node --inspect-brk --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:coverage":"nyc -r json --report-dir ./coverage/node node --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},files:["dist","!dist/types/test"],main:"dist/duckdb-browser.cjs",module:"dist/duckdb-browser.mjs",types:"dist/duckdb-browser.d.ts",jsdelivr:"dist/duckdb-browser.cjs",unpkg:"dist/duckdb-browser.mjs",sideEffects:!1,browser:{fs:!1,path:!1,perf_hooks:!1,os:!1,worker_threads:!1},exports:{"./dist/duckdb-mvp.wasm":"./dist/duckdb-mvp.wasm","./dist/duckdb-eh.wasm":"./dist/duckdb-eh.wasm","./dist/duckdb-coi.wasm":"./dist/duckdb-coi.wasm","./dist/duckdb-browser":"./dist/duckdb-browser.mjs","./dist/duckdb-browser.cjs":"./dist/duckdb-browser.cjs","./dist/duckdb-browser.mjs":"./dist/duckdb-browser.mjs","./dist/duckdb-browser-blocking":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.mjs":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.cjs":"./dist/duckdb-browser-blocking.cjs","./dist/duckdb-browser-coi.pthread.worker.js":"./dist/duckdb-browser-coi.pthread.worker.js","./dist/duckdb-browser-coi.worker.js":"./dist/duckdb-browser-coi.worker.js","./dist/duckdb-browser-eh.worker.js":"./dist/duckdb-browser-eh.worker.js","./dist/duckdb-browser-mvp.worker.js":"./dist/duckdb-browser-mvp.worker.js","./dist/duckdb-node":"./dist/duckdb-node.cjs","./dist/duckdb-node.cjs":"./dist/duckdb-node.cjs","./dist/duckdb-node-blocking":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-blocking.cjs":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-eh.worker.cjs":"./dist/duckdb-node-eh.worker.cjs","./dist/duckdb-node-mvp.worker.cjs":"./dist/duckdb-node-mvp.worker.cjs","./blocking":{browser:{types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},node:{types:"./dist/duckdb-node-blocking.d.ts",require:"./dist/duckdb-node-blocking.cjs",import:"./dist/duckdb-node-blocking.cjs"},types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},".":{browser:{types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"},node:{types:"./dist/duckdb-node.d.ts",import:"./dist/duckdb-node.cjs",require:"./dist/duckdb-node.cjs"},types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"}}};var j=G.name,q=G.version,B=G.version.split("."),Q=B[0],Y=B[1],H=B[2];var K=()=>typeof navigator>"u",W=()=>K()?"node":navigator.userAgent,x=()=>W().includes("Firefox"),V=()=>/^((?!chrome|android).)*safari/i.test(W());function z(){let e=`https://cdn.jsdelivr.net/npm/${j}@${q}/dist/`;return{mvp:{mainModule:`${e}duckdb-mvp.wasm`,mainWorker:`${e}duckdb-browser-mvp.worker.js`},eh:{mainModule:`${e}duckdb-eh.wasm`,mainWorker:`${e}duckdb-browser-eh.worker.js`}}}var $=null,J=null,Z=null,X=null,ee=null;async function se(){return $==null&&($=typeof BigInt64Array<"u"),J==null&&(J=await D()),Z==null&&(Z=await M()),X==null&&(X=await v()),ee==null&&(ee=await f()),{bigInt64Array:$,crossOriginIsolated:K()||globalThis.crossOriginIsolated||!1,wasmExceptions:J,wasmSIMD:X,wasmThreads:Z,wasmBulkMemory:ee}}async function te(e){let s=await se();if(s.wasmExceptions){if(s.wasmSIMD&&s.wasmThreads&&s.crossOriginIsolated&&e.coi)return{mainModule:e.coi.mainModule,mainWorker:e.coi.mainWorker,pthreadWorker:e.coi.pthreadWorker};if(e.eh)return{mainModule:e.eh.mainModule,mainWorker:e.eh.mainWorker,pthreadWorker:null}}return{mainModule:e.mvp.mainModule,mainWorker:e.mvp.mainWorker,pthreadWorker:null}}var ae=c(E());async function re(e){let s=new Request(e),t=await fetch(s),a=URL.createObjectURL(await t.blob());return new ae.default(a)}function ne(){let e=new TextDecoder;return s=>(typeof SharedArrayBuffer<"u"&&s.buffer instanceof SharedArrayBuffer&&(s=new Uint8Array(s)),e.decode(s))}ne();var ie=(e=>(e[e.BUFFER=0]="BUFFER",e[e.NODE_FS=1]="NODE_FS",e[e.BROWSER_FILEREADER=2]="BROWSER_FILEREADER",e[e.BROWSER_FSACCESS=3]="BROWSER_FSACCESS",e[e.HTTP=4]="HTTP",e[e.S3=5]="S3",e))(ie||{});export{C as AsyncDuckDB,y as AsyncDuckDBConnection,U as AsyncDuckDBDispatcher,k as AsyncPreparedStatement,N as AsyncResultStreamIterator,h as ConsoleLogger,l as DuckDBAccessMode,ie as DuckDBDataProtocol,R as LogEvent,_ as LogLevel,T as LogOrigin,u as LogTopic,j as PACKAGE_NAME,q as PACKAGE_VERSION,Q as PACKAGE_VERSION_MAJOR,Y as PACKAGE_VERSION_MINOR,H as PACKAGE_VERSION_PATCH,g as StatusCode,p as VoidLogger,w as WorkerRequestType,O as WorkerResponseType,F as WorkerTask,re as createWorker,z as getJsDelivrBundles,m as getLogEventLabel,I as getLogLevelLabel,S as getLogOriginLabel,b as getLogTopicLabel,se as getPlatformFeatures,x as isFirefox,K as isNode,V as isSafari,te as selectBundle};export default null;
//# sourceMappingURL=/sm/16987012c8d41bf1587e475bdde74d222c12bd3baf64588265a19435b0971851.map