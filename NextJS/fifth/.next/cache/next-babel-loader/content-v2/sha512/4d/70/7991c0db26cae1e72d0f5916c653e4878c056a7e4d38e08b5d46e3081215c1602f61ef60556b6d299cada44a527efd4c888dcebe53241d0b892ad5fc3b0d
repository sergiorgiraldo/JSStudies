{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment } from \"react\";\nimport { getFilteredEvents } from \"../../helpers/api-utils\";\nimport EventList from \"../../components/events/event-list\";\nimport ResultsTitle from \"../../components/events/results-title\";\nimport Button from \"../../components/ui/button\";\nimport ErrorAlert from \"../../components/ui/error-alert\";\n\nfunction FilteredEventsPage(props) {\n  if (props.hasError) {\n    return /*#__PURE__*/_jsxs(Fragment, {\n      children: [/*#__PURE__*/_jsx(ErrorAlert, {\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \"Invalid filter. Please adjust your values!\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsx(Button, {\n          link: \"/events\",\n          children: \"Show All Events\"\n        })\n      })]\n    });\n  }\n\n  if (!props.events || props.events.length === 0) {\n    return /*#__PURE__*/_jsxs(Fragment, {\n      children: [/*#__PURE__*/_jsx(ErrorAlert, {\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \"No events found for the chosen filter!\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsx(Button, {\n          link: \"/events\",\n          children: \"Show All Events\"\n        })\n      })]\n    });\n  }\n\n  const date = new Date(props.year, props.month - 1);\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(ResultsTitle, {\n      date: date\n    }), /*#__PURE__*/_jsx(EventList, {\n      items: props.events\n    })]\n  });\n}\n\nexport async function getServerSideProps(context) {\n  const {\n    params\n  } = context;\n  const filterData = params.slug;\n  const filteredYear = filterData[0];\n  const filteredMonth = filterData[1];\n  const numYear = +filteredYear;\n  const numMonth = +filteredMonth;\n\n  if (isNaN(numYear) || isNaN(numMonth) || numYear > 2030 || numYear < 2021 || numMonth < 1 || numMonth > 12) {\n    return {\n      props: {\n        hasError: true\n      }\n    };\n  }\n\n  const filteredEvents = await getFilteredEvents({\n    year: numYear,\n    month: numMonth\n  });\n  return {\n    props: {\n      events: filteredEvents,\n      year: numYear,\n      month: numMonth\n    }\n  };\n}\nexport default FilteredEventsPage;","map":null,"metadata":{},"sourceType":"module"}