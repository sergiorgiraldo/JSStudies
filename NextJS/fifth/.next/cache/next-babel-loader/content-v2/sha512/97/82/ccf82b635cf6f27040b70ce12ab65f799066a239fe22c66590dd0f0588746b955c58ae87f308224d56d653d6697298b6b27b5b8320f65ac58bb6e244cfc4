{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment } from \"react\";\nimport { getEventById, getFeaturedEvents } from \"../../helpers/api-utils\";\nimport EventSummary from \"../../components/event-detail/event-summary\";\nimport EventLogistics from \"../../components/event-detail/event-logistics\";\nimport EventContent from \"../../components/event-detail/event-content\";\n\nfunction EventDetailPage(props) {\n  const event = props.selectedEvent;\n\n  if (!event) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsx(\"p\", {\n        children: \"Loading...\"\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(EventSummary, {\n      title: event.title\n    }), /*#__PURE__*/_jsx(EventLogistics, {\n      date: event.date,\n      address: event.location,\n      image: event.image,\n      imageAlt: event.title\n    }), /*#__PURE__*/_jsx(EventContent, {\n      children: /*#__PURE__*/_jsx(\"p\", {\n        children: event.description\n      })\n    })]\n  });\n}\n\nexport async function getStaticProps(context) {\n  const eventId = context.params.eventId;\n  const event = await getEventById(eventId);\n\n  if (!event) {\n    return {\n      notFound: true\n    }; //redirects to 404\n  }\n\n  return {\n    props: {\n      selectedEvent: event\n    },\n    revalidate: 30\n  };\n}\nexport async function getStaticPaths() {\n  const events = await getFeaturedEvents();\n  const paths = events.map(event => ({\n    params: {\n      eventId: event.id\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: true\n  };\n}\nexport default EventDetailPage;","map":null,"metadata":{},"sourceType":"module"}