{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/GK47LX/source/JSStudies/NextJS/next-with-apollo-graphql/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/GK47LX/source/JSStudies/NextJS/next-with-apollo-graphql/components/Countries.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery Countries {\\n\\t\\tcountries {\\n\\t\\t\\tcode\\n\\t\\t\\tname\\n\\t\\t\\temoji\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport styles from \"../styles/Home.module.css\";\nvar QUERY = gql(_templateObject());\nexport default function Countries() {\n  _s();\n\n  var _this = this;\n\n  var _useQuery = useQuery(QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }, this);\n  }\n\n  if (error) {\n    console.error(error);\n    return null;\n  }\n\n  var countries = data.countries.slice(0, 8);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.grid,\n    children: countries.map(function (country) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.card,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: country.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 6\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [country.code, \" - \", country.emoji]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 6\n        }, _this)]\n      }, country.code, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Countries, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = Countries;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"sources":["/Users/GK47LX/source/JSStudies/NextJS/next-with-apollo-graphql/components/Countries.js"],"names":["useQuery","gql","styles","QUERY","Countries","data","loading","error","console","countries","slice","grid","map","country","card","name","code","emoji"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA,IAAMC,KAAK,GAAGF,GAAH,mBAAX;AAUA,eAAe,SAASG,SAAT,GAAqB;AAAA;;AAAA;;AAAA,kBACFJ,QAAQ,CAACG,KAAD,CADN;AAAA,MAC3BE,IAD2B,aAC3BA,IAD2B;AAAA,MACrBC,OADqB,aACrBA,OADqB;AAAA,MACZC,KADY,aACZA,KADY;;AAGnC,MAAID,OAAJ,EAAa;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,MAAIC,KAAJ,EAAW;AACVC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,WAAO,IAAP;AACA;;AAED,MAAME,SAAS,GAAGJ,IAAI,CAACI,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwB,CAAxB,CAAlB;AAEA,sBACC;AAAK,IAAA,SAAS,EAAER,MAAM,CAACS,IAAvB;AAAA,cACEF,SAAS,CAACG,GAAV,CAAc,UAACC,OAAD;AAAA,0BACd;AAAwB,QAAA,SAAS,EAAEX,MAAM,CAACY,IAA1C;AAAA,gCACC;AAAA,oBAAKD,OAAO,CAACE;AAAb;AAAA;AAAA;AAAA;AAAA,iBADD,eAEC;AAAA,qBACEF,OAAO,CAACG,IADV,SACmBH,OAAO,CAACI,KAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFD;AAAA,SAAUJ,OAAO,CAACG,IAAlB;AAAA;AAAA;AAAA;AAAA,eADc;AAAA,KAAd;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAYA;;GA1BuBZ,S;UACUJ,Q;;;KADVI,S","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\nimport styles from \"../styles/Home.module.css\";\n\nconst QUERY = gql`\n\tquery Countries {\n\t\tcountries {\n\t\t\tcode\n\t\t\tname\n\t\t\temoji\n\t\t}\n\t}\n`;\n\nexport default function Countries() {\n\tconst { data, loading, error } = useQuery(QUERY);\n\n\tif (loading) {\n\t\treturn <h2>Loading...</h2>;\n\t}\n\n\tif (error) {\n\t\tconsole.error(error);\n\t\treturn null;\n\t}\n\n\tconst countries = data.countries.slice(0, 8);\n\n\treturn (\n\t\t<div className={styles.grid}>\n\t\t\t{countries.map((country) => (\n\t\t\t\t<div key={country.code} className={styles.card}>\n\t\t\t\t\t<h3>{country.name}</h3>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{country.code} - {country.emoji}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}