{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nconst postsDirectory = path.join(process.cwd(), \"posts\");\nexport function getPostsFiles() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostData(postFilename) {\n  const filePath = path.join(postsDirectory, postFilename);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const slug = postFilename.replace(/\\.md$/, \"\"); // removes the file extension\n\n  const {\n    data,\n    content\n  } = matter(fileContent);\n\n  const postData = _objectSpread(_objectSpread({\n    slug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n}\nexport function getAllPosts() {\n  const postFiles = getPostsFiles();\n  const allPosts = postFiles.map(postFilename => {\n    return getPostData(postFilename);\n  });\n  const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.date ? -1 : 1);\n  return sortedPosts;\n}\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n}","map":null,"metadata":{},"sourceType":"module"}