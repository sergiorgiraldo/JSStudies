{"ast":null,"code":"import { getSession, signOut } from \"next-auth/client\";\nimport { hashPassword, verifyPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"PATCH\") {\n    return;\n  }\n\n  console.log(\"Changing password.\");\n  const session = await getSession({\n    req: req\n  });\n\n  if (!session) {\n    res.status(401).json({\n      message: \"Not authenticated!\"\n    });\n    return;\n  }\n\n  const userEmail = session.user.email;\n  const oldPassword = req.body.oldPassword;\n  const newPassword = req.body.newPassword;\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"users\");\n  const user = await usersCollection.findOne({\n    email: userEmail\n  });\n\n  if (!user) {\n    res.status(404).json({\n      message: \"User not found.\"\n    });\n    client.close();\n    return;\n  }\n\n  const currentPassword = user.password;\n  const passwordsAreEqual = await verifyPassword(oldPassword, currentPassword);\n\n  if (!passwordsAreEqual) {\n    console.log(\"Invalid password.\");\n    res.status(403).json({\n      message: \"Invalid password.\"\n    });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(newPassword);\n  const result = await usersCollection.updateOne({\n    email: userEmail\n  }, {\n    $set: {\n      password: hashedPassword\n    }\n  });\n  client.close();\n  console.log(\"Password updated!\");\n  res.status(200).json({\n    message: \"Password updated!\"\n  });\n  signOut();\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/GK47LX/source/JSStudies/NextJS/eleventh/pages/api/user/change-password.js"],"names":["getSession","signOut","hashPassword","verifyPassword","connectToDatabase","handler","req","res","method","console","log","session","status","json","message","userEmail","user","email","oldPassword","body","newPassword","client","usersCollection","db","collection","findOne","close","currentPassword","password","passwordsAreEqual","hashedPassword","result","updateOne","$set"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,kBAApC;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,mBAA7C;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAChC,MAAID,GAAG,CAACE,MAAJ,KAAe,OAAnB,EAA4B;AAC3B;AACA;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,QAAMC,OAAO,GAAG,MAAMX,UAAU,CAAC;AAAEM,IAAAA,GAAG,EAAEA;AAAP,GAAD,CAAhC;;AAEA,MAAI,CAACK,OAAL,EAAc;AACbJ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACA;;AAED,QAAMC,SAAS,GAAGJ,OAAO,CAACK,IAAR,CAAaC,KAA/B;AACA,QAAMC,WAAW,GAAGZ,GAAG,CAACa,IAAJ,CAASD,WAA7B;AACA,QAAME,WAAW,GAAGd,GAAG,CAACa,IAAJ,CAASC,WAA7B;AAEA,QAAMC,MAAM,GAAG,MAAMjB,iBAAiB,EAAtC;AAEA,QAAMkB,eAAe,GAAGD,MAAM,CAACE,EAAP,GAAYC,UAAZ,CAAuB,OAAvB,CAAxB;AAEA,QAAMR,IAAI,GAAG,MAAMM,eAAe,CAACG,OAAhB,CAAwB;AAAER,IAAAA,KAAK,EAAEF;AAAT,GAAxB,CAAnB;;AAEA,MAAI,CAACC,IAAL,EAAW;AACVT,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAO,IAAAA,MAAM,CAACK,KAAP;AACA;AACA;;AAED,QAAMC,eAAe,GAAGX,IAAI,CAACY,QAA7B;AAEA,QAAMC,iBAAiB,GAAG,MAAM1B,cAAc,CAC7Ce,WAD6C,EAE7CS,eAF6C,CAA9C;;AAKA,MAAI,CAACE,iBAAL,EAAwB;AACrBpB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACFH,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAO,IAAAA,MAAM,CAACK,KAAP;AACA;AACA;;AAED,QAAMI,cAAc,GAAG,MAAM5B,YAAY,CAACkB,WAAD,CAAzC;AAEA,QAAMW,MAAM,GAAG,MAAMT,eAAe,CAACU,SAAhB,CACpB;AAAEf,IAAAA,KAAK,EAAEF;AAAT,GADoB,EAEpB;AAAEkB,IAAAA,IAAI,EAAE;AAAEL,MAAAA,QAAQ,EAAEE;AAAZ;AAAR,GAFoB,CAArB;AAKAT,EAAAA,MAAM,CAACK,KAAP;AACCjB,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACDH,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AACCb,EAAAA,OAAO;AACR;;AAED,eAAeI,OAAf","sourcesContent":["import { getSession, signOut } from \"next-auth/client\";\n\nimport { hashPassword, verifyPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n\tif (req.method !== \"PATCH\") {\n\t\treturn;\n\t}\n  console.log(\"Changing password.\");\n\tconst session = await getSession({ req: req });\n\n\tif (!session) {\n\t\tres.status(401).json({ message: \"Not authenticated!\" });\n\t\treturn;\n\t}\n\n\tconst userEmail = session.user.email;\n\tconst oldPassword = req.body.oldPassword;\n\tconst newPassword = req.body.newPassword;\n\n\tconst client = await connectToDatabase();\n\n\tconst usersCollection = client.db().collection(\"users\");\n\n\tconst user = await usersCollection.findOne({ email: userEmail });\n\n\tif (!user) {\n\t\tres.status(404).json({ message: \"User not found.\" });\n\t\tclient.close();\n\t\treturn;\n\t}\n\n\tconst currentPassword = user.password;\n\n\tconst passwordsAreEqual = await verifyPassword(\n\t\toldPassword,\n\t\tcurrentPassword\n\t);\n\n\tif (!passwordsAreEqual) {\n    console.log(\"Invalid password.\");\n\t\tres.status(403).json({ message: \"Invalid password.\" });\n\t\tclient.close();\n\t\treturn;\n\t}\n\n\tconst hashedPassword = await hashPassword(newPassword);\n\n\tconst result = await usersCollection.updateOne(\n\t\t{ email: userEmail },\n\t\t{ $set: { password: hashedPassword } }\n\t);\n\n\tclient.close();\n  console.log(\"Password updated!\");\n\tres.status(200).json({ message: \"Password updated!\" });\n  signOut();\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}