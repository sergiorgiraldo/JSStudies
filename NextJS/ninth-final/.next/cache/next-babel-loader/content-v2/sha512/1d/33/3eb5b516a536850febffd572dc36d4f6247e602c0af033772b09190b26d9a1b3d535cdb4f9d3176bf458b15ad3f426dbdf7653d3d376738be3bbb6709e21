{"ast":null,"code":"import { MongoClient } from \"mongodb\";\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    const {\n      email,\n      name,\n      message\n    } = req.body;\n\n    if (!email || !email.includes(\"@\") || !name || name.trim() === \"\" || !message || message.trim() === \"\") {\n      res.status(422).json({\n        message: \"Invalid input.\"\n      });\n      return;\n    }\n\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n    let client;\n\n    try {\n      client = await MongoClient.connect(\"mongodb+srv://maximilian:2YkcXq43KyPk0vqp@cluster0.ntrwp.mongodb.net/my-site?retryWrites=true&w=majority\");\n    } catch (error) {\n      res.status(500).json({\n        message: \"Could not connect to database.\"\n      });\n      return;\n    }\n\n    const db = client.db();\n\n    try {\n      const result = await db.collection(\"messages\").insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({\n        message: \"Storing message failed!\"\n      });\n      return;\n    }\n\n    client.close();\n    res.status(201).json({\n      message: \"Successfully stored message!\",\n      message: newMessage\n    });\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/GK47LX/source/JSStudies/NextJS/ninth-final/pages/api/contact.js"],"names":["MongoClient","handler","req","res","method","email","name","message","body","includes","trim","status","json","newMessage","client","connect","error","db","result","collection","insertOne","id","insertedId","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAChC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AAC1B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA2BL,GAAG,CAACM,IAArC;;AAEA,QACC,CAACH,KAAD,IACA,CAACA,KAAK,CAACI,QAAN,CAAe,GAAf,CADD,IAEA,CAACH,IAFD,IAGAA,IAAI,CAACI,IAAL,OAAgB,EAHhB,IAIA,CAACH,OAJD,IAKAA,OAAO,CAACG,IAAR,OAAmB,EANpB,EAOE;AACDP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA;;AAED,UAAMM,UAAU,GAAG;AAClBR,MAAAA,KADkB;AAElBC,MAAAA,IAFkB;AAGlBC,MAAAA;AAHkB,KAAnB;AAMA,QAAIO,MAAJ;;AAEA,QAAI;AACHA,MAAAA,MAAM,GAAG,MAAMd,WAAW,CAACe,OAAZ,CACd,0GADc,CAAf;AAGA,KAJD,CAIE,OAAOC,KAAP,EAAc;AACfb,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA;;AAED,UAAMU,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;;AAEA,QAAI;AACH,YAAMC,MAAM,GAAG,MAAMD,EAAE,CACrBE,UADmB,CACR,UADQ,EAEnBC,SAFmB,CAETP,UAFS,CAArB;AAGAA,MAAAA,UAAU,CAACQ,EAAX,GAAgBH,MAAM,CAACI,UAAvB;AACA,KALD,CAKE,OAAON,KAAP,EAAc;AACfF,MAAAA,MAAM,CAACS,KAAP;AACApB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACA;;AAEDO,IAAAA,MAAM,CAACS,KAAP;AAEApB,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBL,MAAAA,OAAO,EAAE,8BADW;AAEpBA,MAAAA,OAAO,EAAEM;AAFW,KAArB;AAIA;AACD;;AAED,eAAeZ,OAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\n\nasync function handler(req, res) {\n\tif (req.method === \"POST\") {\n\t\tconst { email, name, message } = req.body;\n\n\t\tif (\n\t\t\t!email ||\n\t\t\t!email.includes(\"@\") ||\n\t\t\t!name ||\n\t\t\tname.trim() === \"\" ||\n\t\t\t!message ||\n\t\t\tmessage.trim() === \"\"\n\t\t) {\n\t\t\tres.status(422).json({ message: \"Invalid input.\" });\n\t\t\treturn;\n\t\t}\n\n\t\tconst newMessage = {\n\t\t\temail,\n\t\t\tname,\n\t\t\tmessage\n\t\t};\n\n\t\tlet client;\n\n\t\ttry {\n\t\t\tclient = await MongoClient.connect(\n\t\t\t\t\"mongodb+srv://maximilian:2YkcXq43KyPk0vqp@cluster0.ntrwp.mongodb.net/my-site?retryWrites=true&w=majority\"\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tres.status(500).json({ message: \"Could not connect to database.\" });\n\t\t\treturn;\n\t\t}\n\n\t\tconst db = client.db();\n\n\t\ttry {\n\t\t\tconst result = await db\n\t\t\t\t.collection(\"messages\")\n\t\t\t\t.insertOne(newMessage);\n\t\t\tnewMessage.id = result.insertedId;\n\t\t} catch (error) {\n\t\t\tclient.close();\n\t\t\tres.status(500).json({ message: \"Storing message failed!\" });\n\t\t\treturn;\n\t\t}\n\n\t\tclient.close();\n\n\t\tres.status(201).json({\n\t\t\tmessage: \"Successfully stored message!\",\n\t\t\tmessage: newMessage\n\t\t});\n\t}\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}