{"ast":null,"code":"import { connectDatabase, insertDocument, getAllDocuments } from \"../../../helpers/db-util\";\n\nasync function handler(req, res) {\n  const eventId = req.query.eventId;\n  let client;\n\n  try {\n    client = await connectDatabase();\n  } catch (error) {\n    res.status(500).json({\n      message: \"Connecting to the database failed!\"\n    });\n    return;\n  }\n\n  if (req.method === \"POST\") {\n    const {\n      email,\n      name,\n      text\n    } = req.body;\n\n    if (!email.includes(\"@\") || !name || name.trim() === \"\" || !text || text.trim() === \"\") {\n      res.status(422).json({\n        message: \"Invalid input.\"\n      });\n      client.close();\n      return;\n    }\n\n    const newComment = {\n      email,\n      name,\n      text,\n      eventId\n    };\n    let result;\n\n    try {\n      result = await insertDocument(client, \"comments\", newComment);\n      newComment._id = result.insertedId;\n      res.status(201).json({\n        message: \"Added comment.\",\n        comment: newComment\n      });\n    } catch (error) {\n      res.status(500).json({\n        message: \"Inserting comment failed!\"\n      });\n    }\n  }\n\n  if (req.method === \"GET\") {\n    try {\n      const documents = await getAllDocuments(client, \"comments\", {\n        _id: -1\n      }, {\n        eventId: eventId\n      });\n      res.status(200).json({\n        comments: documents\n      });\n    } catch (error) {\n      res.status(500).json({\n        message: \"Getting comments failed.\"\n      });\n    }\n  }\n\n  client.close();\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/GK47LX/source/JSStudies/NextJS/eighth-mongodb/pages/api/comments/[eventId].js"],"names":["connectDatabase","insertDocument","getAllDocuments","handler","req","res","eventId","query","client","error","status","json","message","method","email","name","text","body","includes","trim","close","newComment","result","_id","insertedId","comment","documents","comments"],"mappings":"AAAA,SACCA,eADD,EAECC,cAFD,EAGCC,eAHD,QAIO,0BAJP;;AAMA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAChC,QAAMC,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAUD,OAA1B;AAEA,MAAIE,MAAJ;;AAEA,MAAI;AACHA,IAAAA,MAAM,GAAG,MAAMR,eAAe,EAA9B;AACA,GAFD,CAEE,OAAOS,KAAP,EAAc;AACfJ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACA;;AAED,MAAIR,GAAG,CAACS,MAAJ,KAAe,MAAnB,EAA2B;AAC1B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBZ,GAAG,CAACa,IAAlC;;AAEA,QACC,CAACH,KAAK,CAACI,QAAN,CAAe,GAAf,CAAD,IACA,CAACH,IADD,IAEAA,IAAI,CAACI,IAAL,OAAgB,EAFhB,IAGA,CAACH,IAHD,IAIAA,IAAI,CAACG,IAAL,OAAgB,EALjB,EAME;AACDd,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACAJ,MAAAA,MAAM,CAACY,KAAP;AACA;AACA;;AAED,UAAMC,UAAU,GAAG;AAClBP,MAAAA,KADkB;AAElBC,MAAAA,IAFkB;AAGlBC,MAAAA,IAHkB;AAIlBV,MAAAA;AAJkB,KAAnB;AAOA,QAAIgB,MAAJ;;AAEA,QAAI;AACHA,MAAAA,MAAM,GAAG,MAAMrB,cAAc,CAACO,MAAD,EAAS,UAAT,EAAqBa,UAArB,CAA7B;AACAA,MAAAA,UAAU,CAACE,GAAX,GAAiBD,MAAM,CAACE,UAAxB;AACAnB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBC,QAAAA,OAAO,EAAE,gBADW;AAEpBa,QAAAA,OAAO,EAAEJ;AAFW,OAArB;AAIA,KAPD,CAOE,OAAOZ,KAAP,EAAc;AACfJ,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAED,MAAIR,GAAG,CAACS,MAAJ,KAAe,KAAnB,EAA0B;AACzB,QAAI;AACH,YAAMa,SAAS,GAAG,MAAMxB,eAAe,CACtCM,MADsC,EAEtC,UAFsC,EAGtC;AACCe,QAAAA,GAAG,EAAE,CAAC;AADP,OAHsC,EAMtC;AACCjB,QAAAA,OAAO,EAAEA;AADV,OANsC,CAAvC;AAUAD,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEgB,QAAAA,QAAQ,EAAED;AAAZ,OAArB;AACA,KAZD,CAYE,OAAOjB,KAAP,EAAc;AACfJ,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAEDJ,EAAAA,MAAM,CAACY,KAAP;AACA;;AAED,eAAejB,OAAf","sourcesContent":["import {\n\tconnectDatabase,\n\tinsertDocument,\n\tgetAllDocuments\n} from \"../../../helpers/db-util\";\n\nasync function handler(req, res) {\n\tconst eventId = req.query.eventId;\n\n\tlet client;\n\n\ttry {\n\t\tclient = await connectDatabase();\n\t} catch (error) {\n\t\tres.status(500).json({ message: \"Connecting to the database failed!\" });\n\t\treturn;\n\t}\n\n\tif (req.method === \"POST\") {\n\t\tconst { email, name, text } = req.body;\n\n\t\tif (\n\t\t\t!email.includes(\"@\") ||\n\t\t\t!name ||\n\t\t\tname.trim() === \"\" ||\n\t\t\t!text ||\n\t\t\ttext.trim() === \"\"\n\t\t) {\n\t\t\tres.status(422).json({ message: \"Invalid input.\" });\n\t\t\tclient.close();\n\t\t\treturn;\n\t\t}\n\n\t\tconst newComment = {\n\t\t\temail,\n\t\t\tname,\n\t\t\ttext,\n\t\t\teventId\n\t\t};\n\n\t\tlet result;\n\n\t\ttry {\n\t\t\tresult = await insertDocument(client, \"comments\", newComment);\n\t\t\tnewComment._id = result.insertedId;\n\t\t\tres.status(201).json({\n\t\t\t\tmessage: \"Added comment.\",\n\t\t\t\tcomment: newComment\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tres.status(500).json({ message: \"Inserting comment failed!\" });\n\t\t}\n\t}\n\n\tif (req.method === \"GET\") {\n\t\ttry {\n\t\t\tconst documents = await getAllDocuments(\n\t\t\t\tclient,\n\t\t\t\t\"comments\",\n\t\t\t\t{\n\t\t\t\t\t_id: -1\n\t\t\t\t},\n\t\t\t\t{ \n\t\t\t\t\teventId: eventId \n\t\t\t\t}\n\t\t\t);\n\t\t\tres.status(200).json({ comments: documents });\n\t\t} catch (error) {\n\t\t\tres.status(500).json({ message: \"Getting comments failed.\" });\n\t\t}\n\t}\n\n\tclient.close();\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}